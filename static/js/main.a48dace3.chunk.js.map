{"version":3,"sources":["components/Expenses.jsx","components/List.jsx","components/ExpensesList.jsx","components/SingleMeter.jsx","components/MeterBox.jsx","components/FilterYear.jsx","App.js","reportWebVitals.js","index.js"],"names":["Expenses","onSubmitForm","useState","formDate","setDate","formTitle","setTitle","formAmount","setAmount","edited","setEdited","formClass","setClass","className","onClick","onSubmit","event","preventDefault","expenses","id","Math","random","amount","description","date","Date","htmlFor","type","value","onChange","target","required","min","max","List","list","year","toLocaleString","month","day","ExpensesList","expenseList","map","SingleMeter","totalExp","title","MeterBox","totalAmount","monthlyAmount","Jan","Feb","March","April","May","June","July","Aug","Sep","Oct","Nov","Dec","Amount","Object","values","keys","FilterYear","filterBox","selectedYear","setYear","years","filter","box","getFullYear","toString","val","Array","x","i","length","parseInt","App","setExpense","prevState","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a48dace3.chunk.js","sourcesContent":["import { useState } from \"react\";\r\nimport \"./Expenses.css\";\r\n\r\nconst Expenses = ({ onSubmitForm }) => {\r\n  const [formDate, setDate] = useState(\"\");\r\n  const [formTitle, setTitle] = useState(\"\");\r\n  const [formAmount, setAmount] = useState(\"\");\r\n  const [edited, setEdited] = useState(false);\r\n  const [formClass, setClass] = useState(\"formTop formHide\");\r\n\r\n  const titleHandler = (event) => {\r\n    setTitle(event.target.value);\r\n  };\r\n\r\n  const amountHandler = (event) => {\r\n    setAmount(event.target.value);\r\n  };\r\n\r\n  const dateHandler = (event) => {\r\n    setDate(event.target.value);\r\n  };\r\n\r\n  const submit = (event) => {\r\n    event.preventDefault();\r\n    const expenses = {\r\n      id: Math.random(),\r\n      amount: formAmount,\r\n      description: formTitle,\r\n      date: new Date(formDate),\r\n    };\r\n    if (expenses.amount !== \"\") onSubmitForm(expenses);\r\n    setDate(\"\");\r\n    setTitle(\"\");\r\n    setAmount(\"\");\r\n  };\r\n\r\n  const isEditing = () => {\r\n    setEdited(true);\r\n    setClass(\"formTop\");\r\n  };\r\n\r\n  const onCancel = () => {\r\n    setEdited(false);\r\n    setClass(\"formTop formHide\");\r\n  };\r\n\r\n  return (\r\n    <div className={formClass}>\r\n      {!edited && (\r\n        <button className=\"formBtn newBtn\" onClick={isEditing}>\r\n          Add New Expense\r\n        </button>\r\n      )}\r\n      {edited && (\r\n        <form onSubmit={submit}>\r\n          <div className=\"form\">\r\n            <div className=\"cancel\" onClick={onCancel}>\r\n              <div></div>\r\n              <div></div>\r\n            </div>\r\n            <div className=\"formTitle\">\r\n              <label htmlFor=\"title\">Title</label>\r\n              <input\r\n                type=\"text\"\r\n                id=\"title\"\r\n                value={formTitle}\r\n                onChange={titleHandler}\r\n                required\r\n              />\r\n            </div>\r\n            <div className=\"formDate\">\r\n              <label htmlFor=\"date\">Date</label>\r\n              <input\r\n                type=\"date\"\r\n                id=\"date\"\r\n                min=\"2019-01-01\"\r\n                max=\"2022-12-31\"\r\n                value={formDate}\r\n                onChange={dateHandler}\r\n                required\r\n              />\r\n            </div>\r\n            <div className=\"formAmount\">\r\n              <label htmlFor=\"number\">Amount</label>\r\n              <input\r\n                type=\"number\"\r\n                id=\"number\"\r\n                min=\"0\"\r\n                value={formAmount}\r\n                onChange={amountHandler}\r\n                required\r\n              />\r\n            </div>\r\n            <div>\r\n              <button className=\"formBtn\" type=\"submit\">\r\n                Add Expenses\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </form>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Expenses;\r\n","import \"./list.css\";\r\n\r\nconst List = ({ list }) => {\r\n  const year = list.date.toLocaleString(\"en-us\", {\r\n    year: \"numeric\",\r\n  });\r\n  const month = list.date.toLocaleString(\"en-us\", {\r\n    month: \"long\",\r\n  });\r\n  const day = list.date.toLocaleString(\"en-us\", {\r\n    day: \"numeric\",\r\n  });\r\n  return (\r\n    <div className=\"list\">\r\n      <div className=\"date\">\r\n        <div>{month}</div>\r\n        <div>{year}</div>\r\n        <div>{day}</div>\r\n      </div>\r\n      <div className=\"title\">{list.description}</div>\r\n      <div className=\"amount\">${list.amount}</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default List;\r\n","import List from \"./List\";\r\n\r\nconst ExpensesList = ({ expenseList }) => {\r\n  return (\r\n    <div>\r\n      {expenseList.map((list) => (\r\n        <List key={list.id} list={list} />\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ExpensesList;\r\n","import \"./SingleMeter.css\";\r\n\r\nconst SingleMeter = ({ totalExp, month }) => {\r\n  //console.log(totalExp[0]);\r\n  return (\r\n    <div className=\"SingleMeter\">\r\n      <progress\r\n        className=\"progress\"\r\n        value={totalExp[0]}\r\n        max=\"1000\"\r\n        title={totalExp[0]}\r\n      ></progress>\r\n      <h2>{month[0]}</h2>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SingleMeter;\r\n","import SingleMeter from \"./SingleMeter\";\r\nimport \"./meterBox.css\";\r\n\r\nconst MeterBox = ({ totalAmount }) => {\r\n  //console.log(selectedYears);\r\n  /*const months = selectedYears.map((year) =>\r\n    year.date.toLocaleString(\"en-Us\", { month: \"numeric\" })\r\n  );\r\n  console.log(months);*/\r\n  const monthlyAmount = [\r\n    { Jan: totalAmount[0] },\r\n    { Feb: totalAmount[1] },\r\n    { March: totalAmount[2] },\r\n    { April: totalAmount[3] },\r\n    { May: totalAmount[4] },\r\n    { June: totalAmount[5] },\r\n    { July: totalAmount[6] },\r\n    { Aug: totalAmount[7] },\r\n    { Sep: totalAmount[8] },\r\n    { Oct: totalAmount[9] },\r\n    { Nov: totalAmount[10] },\r\n    { Dec: totalAmount[11] },\r\n  ];\r\n  return (\r\n    <div className=\"meterBox\">\r\n      {monthlyAmount.map((Amount) => (\r\n        <SingleMeter\r\n          key={Object.keys(Amount)}\r\n          totalExp={Object.values(Amount)}\r\n          month={Object.keys(Amount)}\r\n        />\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MeterBox;\r\n","import { useState } from \"react\";\r\nimport MeterBox from \"./MeterBox\";\r\nimport \"./FilterYear.css\";\r\n\r\nconst FilterYear = ({ filterBox }) => {\r\n  const [selectedYear, setYear] = useState(\"2019\");\r\n  //const [selectedExpense, setExpense] = useState([]);\r\n  const handleChange = (event) => {\r\n    setYear(event.target.value);\r\n  };\r\n  const years = filterBox.filter(\r\n    (box) => box.date.getFullYear().toString() === selectedYear\r\n  );\r\n  //console.log(years);\r\n\r\n  //creating an array of 12 months corresponding to selected year expenditure\r\n  let val = [...Array(12)].map((x) => 0);\r\n  for (let i = 0; i < years.length; i++) {\r\n    const index = parseInt(\r\n      years[i].date.toLocaleString(\"en-Us\", { month: \"numeric\" })\r\n    );\r\n    val[index - 1] += parseInt(years[i].amount);\r\n    //console.log(val);\r\n  }\r\n\r\n  return (\r\n    <div className=\"filterBox\">\r\n      <div className=\"filter\">\r\n        <h1>Expenses per Month</h1>\r\n        <div>\r\n          <select onChange={handleChange} value={selectedYear}>\r\n            <option value=\"2019\">2019</option>\r\n            <option value=\"2020\">2020</option>\r\n            <option value=\"2021\">2021</option>\r\n            <option value=\"2022\">2022</option>\r\n          </select>\r\n        </div>\r\n      </div>\r\n      <div className=\"meter\">\r\n        <MeterBox totalAmount={val} />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default FilterYear;\r\n","import { useState } from \"react\";\nimport Expenses from \"./components/Expenses\";\nimport ExpensesList from \"./components/ExpensesList\";\nimport FilterYear from \"./components/FilterYear\";\n\nfunction App() {\n  const [expenses, setExpense] = useState([]);\n\n  const SubmitForm = (expenses) => {\n    setExpense((prevState) => {\n      return [expenses, ...prevState];\n    });\n  };\n  return (\n    <div className=\"App\">\n      <Expenses onSubmitForm={SubmitForm} />\n      <FilterYear filterBox={expenses} />\n      <ExpensesList expenseList={expenses} />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}